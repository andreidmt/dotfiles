#!/usr/bin/env sh

# ██████╗ ██████╗ ██████╗            ██╗  ██╗███╗   ███╗██╗   ██╗ ██████╗
# ██╔══██╗██╔══██╗██╔══██╗    ██╗    ██║  ██║████╗ ████║██║   ██║██╔════╝
# ██║  ██║██║  ██║██║  ██║  ██████╗  ███████║██╔████╔██║██║   ██║██║
# ██║  ██║██║  ██║██║  ██║  ╚═██╔═╝  ██╔══██║██║╚██╔╝██║╚██╗ ██╔╝██║
# ██████╔╝██████╔╝██████╔╝    ╚═╝    ██║  ██║██║ ╚═╝ ██║ ╚████╔╝ ╚██████╗
# ╚═════╝ ╚═════╝ ╚═════╝            ╚═╝  ╚═╝╚═╝     ╚═╝  ╚═══╝   ╚═════╝
#            ██╗██████╗
# ██████╗   ██╔╝╚════██╗
# ╚═════╝  ██╔╝  █████╔╝
# ██████╗  ╚██╗  ╚═══██╗
# ╚═════╝   ╚██╗██████╔╝
#            ╚═╝╚═════╝
# NAME
#  DDD + HMVC style shell modules
#
# DESCRIPTION
#  An DDD (Domain Driven Design) and HMVC (Hierarchical Model View Controller)
#  style module system for organizing shell scripts, functions, variables, etc.
#
#  Each module is a self-contained unit, with its own directory, with minimal
#  dependencies on other modules.
#  Modules have their own .init file as entry point to their functionality.
#
#  Example structure:
#   @core/
#   aws/
#    config/
#    scripts/
#    .env
#    .bootstrap
#    .init
#    .install
#   ui/
#    i3/
#     config/
#     scripts/
#    sway/
#     ..
#   .init
#
#  Here, the i3 module contains everything related to i3. The config file,
#  layouts, toolbars, i3blocks widgets, etc.
#
#  This is contrary to the default MVC (Model View Controller) way of
#  organizing, that Linux uses, where the config file is in
#  ~/.config/i3/config, the i3blocks config is in ~/.config/i3blocks/config,
#  the scripts are in ~/.local/i3-widgets, etc.
#
# INSTALLATION
#  This file is meant to be sourced (it exports functions and variables) in the
#  shell's rc file (e.g. .zshrc).
#
#  source /path/to/modules/.init
#
# SPECIAL FILES (listing also describes also the order of sourcing)
#  [.should-load]
#   Control whether or not to load the module.
#
#  [.bootstrap]
#   File source before .install and/or .init. Use it to store common env vars
#   etc.
#
#  <.init>
#   Entry point file to the module's functionality. Automatically detected
#   and sourced by this file.
#
# INSTALL PHASE
#  Every 24 hours, an "upgrade lock" is aquired. The terminal with the lock
#  will trigger the processing of extra files. These files are ment to keep the
#  system and modules up to date.
#
#  [packages.csv]
#   Pacman or AUR package with module dependencies.

#  [.install]
#   Logic ment to keep the module updated and functioning, logic that's not
#   required to run every terminal session.
#
# RECOMMENDED FOLDERS
#  .env       File for private env data, such as API keys, passwords, etc.
#             Ignored by git.
#  .local/    Directory for temporary files and other data. Ignored by git.
#  .cache/    Directory for cache files. Ignored by git.
#  .tmp/      Directory for temporary files. Ignored by git.
#  scripts/   Directory for scripts. Use module .init to include in $PATH and
#             expose shell scripts to the outside world.
#  functions/ Directory for functions. Use module .init to source and expose
#             to the outside world.
#  config/    Directory for config files.
#
# ORDER OF MODULE LOADING
#  Modules are loaded alphabeticaly but the order should not be relied upon
#  when creting modules.
#
# IGNORED
#  Modules whose name starts with "_" are ignored and not loaded. This is
#  useful when you want to temporarily disable a module.

export LOG_NAMESPACE="󰺔 ddd+hmvc"
export LOG_LEVEL=info

HMVC_HOME="$(dirname "$(realpath "$0")")"
HMVC_LOG="$HMVC_HOME/.logs"

mkdir -p "$HMVC_LOG"
start_time_main=$(date +%s%3N)

# ╭──────────────────────
# │ Upgrade modules and packages every 24 hours
# ╰────────

HMVC_UPGRADE_LOCK="${TMPDIR:-/tmp}/hmvc_ddd_upgrade-$(id -u).lock"

acquire_upgrade_lock() {
  if mkdir "$HMVC_UPGRADE_LOCK" 2> /dev/null; then
    echo "$HMVC_UPGRADE_LOCK"
  else
    return 1
  fi
}

release_upgrade_lock() {
  rmdir "$HMVC_UPGRADE_LOCK" 2> /dev/null
}

trap release_upgrade_lock EXIT

upgrade_lock=$(acquire_upgrade_lock)
if has-days-passed --name "hmvc-upgrade" --count 1 && [ -n "$upgrade_lock" ]; then
  export HMVC_SHOULD_UPGRADE=true
else
  export HMVC_SHOULD_UPGRADE=false
fi

# ╭──────────────────────
# │ Manually load modules that must be in a certain order
# ╰────────

install_module() {
  module_dir="$1"

  should_load_path="$module_dir/.should-load"
  [ -f "$should_load_path" ] && ! "$should_load_path" && return

  bootstrap_path="$module_dir/.bootstrap"
  [ -f "$bootstrap_path" ] && . "$bootstrap_path"

  private_dotenv="$module_dir/.env"
  [ -f "$private_dotenv" ] && . "$private_dotenv"

  package_csv_path="$module_dir/packages.csv"
  [ -f "$package_csv_path" ] && install-from-csv "$package_csv_path"

  install_path="$module_dir/.install"
  [ -f "$install_path" ] && . "$install_path"
}

load_module() {
  module_dir="$1"

  should_load_path="$module_dir/.should-load"
  [ -f "$should_load_path" ] && ! "$should_load_path" && return

  bootstrap_path="$module_dir/.bootstrap"
  [ -f "$bootstrap_path" ] && . "$bootstrap_path"

  private_dotenv="$module_dir/.env"
  [ -f "$private_dotenv" ] && . "$private_dotenv"

  init_path="$module_dir/.init"
  [ -f "$init_path" ] && . "$init_path"
}

load_module "$HMVC_HOME/@0_fancy-posix-utils"
load_module "$HMVC_HOME/@1_core"
load_module "$HMVC_HOME/@2_terminal"

if [ "$HMVC_SHOULD_UPGRADE" = true ]; then
  install_module "$HMVC_HOME/@0_fancy-posix-utils"
  install_module "$HMVC_HOME/@1_core"
  install_module "$HMVC_HOME/@2_terminal"
fi

# ╭──────────────────────
# │ Helper functions
# ╰────────

detect_modules() {
  find "$HMVC_HOME" -mindepth 1 -maxdepth 1 -type d \
    ! -name "@*" ! -name "_*" \
    -exec test -f "{}/.init" \; -print \
    | sort
}

# Calculate the duration in milliseconds
calculate_duration() {
  echo "$(($2 - $1))"
}

colorize_duration() {
  if [ "$1" -ge 100 ] && [ "$1" -le 250 ]; then
    printf "\033[33m%dms\033[0m" "$1" # Orange
  elif [ "$1" -gt 250 ]; then
    printf "\033[31m%dms\033[0m" "$1" # Red
  else
    printf "\033[32m%dms\033[0m" "$1" # Green
  fi
}

duration=$(calculate_duration "$start_time_main" "$(date +%s%3N)")
fancy-log success \
  -v modules "fancy-cli,core,terminal" \
  -v duration "$(colorize_duration "$duration")" \
  "Core modules loaded"

# ╭──────────────────────
# │ Install and load shell modules
# ╰────────

all_modules=$(detect_modules)
while IFS= read -r module_dir; do
  start_time=$(date +%s%3N)
  load_module "$module_dir"
  end_time=$(date +%s%3N)

  duration_ms=$(calculate_duration "$start_time" "$end_time")
  fancy-log success -v duration "$(colorize_duration "$duration_ms")" "Module loaded"
done << EOF
$all_modules
EOF

if [ "$HMVC_SHOULD_UPGRADE" = true ]; then
  while IFS= read -r module_dir; do
    install_module "$module_dir"
  done << EOF
$all_modules
EOF
  sys_upgrade packages
fi

total_duration=$(calculate_duration "$start_time_main" "$(date +%s%3N)")
module_count=$(echo "$all_modules" | wc -l | tr -d ' ')
echo "╭───────────┤ Loaded $module_count modules"
echo "│  ┓ ┓ ┓   ┓           ┏┏┓"
echo "│ ┏┫┏┫┏┫ + ┣┓┏┳┓┓┏┏━ = ┫ ┫"
echo "│ ┗┻┗┻┗┻   ┛┗┛┗┗┗┛┗━   ┗┗┛"
echo "╰──┤ $(colorize_duration "$total_duration")"
