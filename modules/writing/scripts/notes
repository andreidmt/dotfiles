#!/usr/bin/env sh

. "$FCLI_FUNCTIONS/stdin-or"

export LOG_NAMESPACE="ó±…„ writing"
export LOG_LEVEL=info

notes_create() {
  draftsPath="$NOTES_DATA/draft"
  path="$draftsPath/$(date +%y-%j).md"

  mkdir -p "$draftsPath"

  if [ ! -f "$path" ]; then
    {
      snippets run "frontmatter_template-toml draft"
      echo ""
    } > "$path"
  fi

  cd "$NOTES_DATA"
  nvim -c "norm G" -c "norm zz" -c "set spell" "$path"
}

notes_open() {
  notePath=$(stdin_or "$1")

  if [ -f "$notePath" ]; then
    cd "$NOTES_DATA"
    nvim -c "norm zz" -c "set spell" "$notePath"
  else
    fancy-log error -v path "$notePath" "Note does not exist"
    exit 2
  fi
}

notes_list() {
  notes=$(rg --files --sortr modified "$NOTES_DATA" | rg .md)

  for path in $notes; do
    title=$(rg "^# " --max-count 1 "$path" | sed -e "s/# //g")
    type=$(sed --quite '/^```toml/,/^```/p' < "$path" \
      | grep --ignore-case "type" \
      | awk --field-separator '[ ="]+' '{ print tolower($2) }'
    )
    relativePath=$(echo "$path" | sed -e "s|$NOTES_DATA/||g")

    if [ -z "$type" ]; then
      printf "%s\n<small>%s</small>|" "${title:-'--'}" "$relativePath"
    else
      printf "[%s] %s\n<small>%s</small>|" "$type" "${title:-'--'}" "$relativePath"
    fi
  done
}

ask() {
  note=$(rg --files --sortr modified "$NOTES_DATA" \
    | fzf --height 100% --border --preview "bat {}")

  [ -n "$note" ] && exec notes open "$note"

  fancy-log error "No note selected"
}

case "${1-ask}" in
  ask) ask ;;
  create) notes_create ;;
	list) notes_list ;;
	open) notes_open "$2" ;;
  *) 
    fancy-log error \
      -v cmd "$1" \
      -v available_commands "ask,create,list,open" \
      "Command not found"
    exit 1 
  ;;
esac
